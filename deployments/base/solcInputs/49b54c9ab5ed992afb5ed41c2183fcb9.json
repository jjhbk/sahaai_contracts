{
  "language": "Solidity",
  "sources": {
    "@openzeppelin/contracts/access/Ownable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable.sol)\n\npragma solidity ^0.8.20;\n\nimport {Context} from \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * The initial owner is set to the address provided by the deployer. This can\n * later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    /**\n     * @dev The caller account is not authorized to perform an operation.\n     */\n    error OwnableUnauthorizedAccount(address account);\n\n    /**\n     * @dev The owner is not a valid owner account. (eg. `address(0)`)\n     */\n    error OwnableInvalidOwner(address owner);\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.\n     */\n    constructor(address initialOwner) {\n        if (initialOwner == address(0)) {\n            revert OwnableInvalidOwner(address(0));\n        }\n        _transferOwnership(initialOwner);\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        if (owner() != _msgSender()) {\n            revert OwnableUnauthorizedAccount(_msgSender());\n        }\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby disabling any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        if (newOwner == address(0)) {\n            revert OwnableInvalidOwner(address(0));\n        }\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n\n    function _contextSuffixLength() internal view virtual returns (uint256) {\n        return 0;\n    }\n}\n"
    },
    "contracts/SubscriptionManager.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\n\ncontract SubscriptionManager is Ownable {\n    enum Plan {\n        Basic,\n        Pro,\n        Enterprise\n    }\n\n    uint256 public basicPrice;\n    uint256 public proPrice;\n    uint256 public enterprisePrice;\n    uint256 public subscriptionDuration;\n\n    struct Subscription {\n        uint256 expiry; // Timestamp of subscription expiry\n        Plan planId;\n        bool active; // Subscription plan ID\n    }\n\n    mapping(address => Subscription) public activeSubscriptions; // Tracks active subscriptions for each user\n    event FundsWithdrawn(address indexed owner, uint256 amount);\n    event Subscribed(address indexed user, Plan plan, uint256 expiry);\n    event PlanUpgraded(\n        address indexed user,\n        Plan oldPlan,\n        Plan newPlan,\n        uint256 expiry\n    );\n    event PlanDowngraded(\n        address indexed user,\n        Plan oldPlan,\n        Plan newPlan,\n        uint256 expiry\n    );\n    event Unsubscribed(address indexed user);\n    event PriceUpdated(\n        uint256 basicPrice,\n        uint256 proPrice,\n        uint256 enterprisePrice\n    );\n\n    constructor(\n        uint256 _basicPrice,\n        uint256 _proPrice,\n        uint256 _enterprisePrice,\n        uint256 _subscriptionDuration\n    ) Ownable(msg.sender) {\n        basicPrice = _basicPrice;\n        proPrice = _proPrice;\n        enterprisePrice = _enterprisePrice;\n        subscriptionDuration = _subscriptionDuration;\n    }\n\n    modifier isSubscribed(address user) {\n        require(\n            activeSubscriptions[user].expiry > block.timestamp,\n            \"Err:sub-expired\"\n        );\n        _;\n    }\n\n    function subscribe(Plan _plan) external payable {\n        uint256 price = getPlanPrice(_plan);\n        require(msg.value == price, \"Err:Sub-fee\");\n\n        uint256 newExpiry = block.timestamp + subscriptionDuration;\n\n        if (activeSubscriptions[msg.sender].expiry < block.timestamp) {\n            activeSubscriptions[msg.sender].planId = _plan;\n        } else {\n            require(\n                newExpiry > activeSubscriptions[msg.sender].expiry,\n                \"Err:Expiry overflow\"\n            );\n        }\n\n        activeSubscriptions[msg.sender].expiry = newExpiry;\n        activeSubscriptions[msg.sender].active = true;\n        emit Subscribed(msg.sender, _plan, newExpiry);\n    }\n\n    function upgradePlan(\n        Plan _newPlan\n    ) external payable isSubscribed(msg.sender) {\n        Plan currentPlan = activeSubscriptions[msg.sender].planId;\n        require(_newPlan > currentPlan, \"Err: upgrade-onlyHigh\");\n\n        uint256 additionalCost = getPlanPrice(_newPlan) -\n            getPlanPrice(currentPlan);\n        require(msg.value == additionalCost, \"Err:Upgrade-incorrect value\");\n\n        activeSubscriptions[msg.sender].planId = _newPlan;\n        uint256 newExpiry = activeSubscriptions[msg.sender].expiry +\n            subscriptionDuration;\n        require(\n            newExpiry > activeSubscriptions[msg.sender].expiry,\n            \"Err:Expiry overflow\"\n        );\n\n        activeSubscriptions[msg.sender].expiry = newExpiry;\n        activeSubscriptions[msg.sender].active = true;\n\n        emit PlanUpgraded(\n            msg.sender,\n            currentPlan,\n            _newPlan,\n            activeSubscriptions[msg.sender].expiry\n        );\n    }\n\n    function unsubscribe() external isSubscribed(msg.sender) {\n        activeSubscriptions[msg.sender].active = false;\n        emit Unsubscribed(msg.sender);\n    }\n\n    function getPlanPrice(Plan _plan) public view returns (uint256) {\n        if (_plan == Plan.Basic) return basicPrice;\n        if (_plan == Plan.Pro) return proPrice;\n        if (_plan == Plan.Enterprise) return enterprisePrice;\n        revert(\"Invalid plan\");\n    }\n\n    function setPrices(\n        uint256 _basicPrice,\n        uint256 _proPrice,\n        uint256 _enterprisePrice\n    ) external onlyOwner {\n        basicPrice = _basicPrice;\n        proPrice = _proPrice;\n        enterprisePrice = _enterprisePrice;\n        emit PriceUpdated(_basicPrice, _proPrice, _enterprisePrice);\n    }\n\n    function setSubscriptionDuration(uint256 _duration) external onlyOwner {\n        subscriptionDuration = _duration;\n    }\n\n    function issUserSubscribed(address user) external view returns (bool) {\n        return activeSubscriptions[user].expiry > block.timestamp;\n    }\n\n    function withdrawFunds(uint256 amount) external onlyOwner {\n        require(\n            address(this).balance >= amount,\n            \"Insufficient contract balance\"\n        );\n        payable(owner()).transfer(amount);\n        emit FundsWithdrawn(owner(), amount);\n    }\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "evmVersion": "paris",
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}