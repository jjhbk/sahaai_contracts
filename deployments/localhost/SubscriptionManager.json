{
  "address": "0x9fE46736679d2D9a65F0992F2272dE9f3c7fa6e0",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_basicPrice",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_proPrice",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_enterprisePrice",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_subscriptionDuration",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "OwnableInvalidOwner",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "OwnableUnauthorizedAccount",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "FundsWithdrawn",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "enum SubscriptionManager.Plan",
          "name": "oldPlan",
          "type": "uint8"
        },
        {
          "indexed": false,
          "internalType": "enum SubscriptionManager.Plan",
          "name": "newPlan",
          "type": "uint8"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "expiry",
          "type": "uint256"
        }
      ],
      "name": "PlanDowngraded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "enum SubscriptionManager.Plan",
          "name": "oldPlan",
          "type": "uint8"
        },
        {
          "indexed": false,
          "internalType": "enum SubscriptionManager.Plan",
          "name": "newPlan",
          "type": "uint8"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "expiry",
          "type": "uint256"
        }
      ],
      "name": "PlanUpgraded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "basicPrice",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "proPrice",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "enterprisePrice",
          "type": "uint256"
        }
      ],
      "name": "PriceUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "enum SubscriptionManager.Plan",
          "name": "plan",
          "type": "uint8"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "expiry",
          "type": "uint256"
        }
      ],
      "name": "Subscribed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        }
      ],
      "name": "Unsubscribed",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "activeSubscriptions",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "expiry",
          "type": "uint256"
        },
        {
          "internalType": "enum SubscriptionManager.Plan",
          "name": "planId",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "basicPrice",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "enterprisePrice",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "enum SubscriptionManager.Plan",
          "name": "_plan",
          "type": "uint8"
        }
      ],
      "name": "getPlanPrice",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        }
      ],
      "name": "issUserSubscribed",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "proPrice",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_basicPrice",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_proPrice",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_enterprisePrice",
          "type": "uint256"
        }
      ],
      "name": "setPrices",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_duration",
          "type": "uint256"
        }
      ],
      "name": "setSubscriptionDuration",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "enum SubscriptionManager.Plan",
          "name": "_plan",
          "type": "uint8"
        }
      ],
      "name": "subscribe",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "subscriptionDuration",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "unsubscribe",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "enum SubscriptionManager.Plan",
          "name": "_newPlan",
          "type": "uint8"
        }
      ],
      "name": "upgradePlan",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "withdrawFunds",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x32ef2bdc0a6fb636ad2d0eb25fb6f5b0bb8726347c70f40311283bf77320de80",
  "receipt": {
    "to": null,
    "from": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
    "contractAddress": "0x9fE46736679d2D9a65F0992F2272dE9f3c7fa6e0",
    "transactionIndex": 0,
    "gasUsed": "786554",
    "logsBloom": "0x
    "blockHash": "0xc7a83fde9581572343fbafb48889fb8464fc85ef0e40de831df673c5f4a5232d",
    "transactionHash": "0x32ef2bdc0a6fb636ad2d0eb25fb6f5b0bb8726347c70f40311283bf77320de80",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 5,
        "transactionHash": "0x32ef2bdc0a6fb636ad2d0eb25fb6f5b0bb8726347c70f40311283bf77320de80",
        "address": "0x9fE46736679d2D9a65F0992F2272dE9f3c7fa6e0",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000f39fd6e51aad88f6f4ce6ab8827279cfffb92266"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0xc7a83fde9581572343fbafb48889fb8464fc85ef0e40de831df673c5f4a5232d"
      }
    ],
    "blockNumber": 5,
    "cumulativeGasUsed": "786554",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "1000000000000000",
    "5000000000000000",
    "8000000000000000",
    "2600000"
  ],
  "numDeployments": 1,
  "solcInputHash": "c1be7394d2b70b8c0857d535cbe58cc4",
  "metadata": "{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_basicPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_proPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_enterprisePrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_subscriptionDuration\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"OwnableInvalidOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"OwnableUnauthorizedAccount\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"FundsWithdrawn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"enum SubscriptionManager.Plan\",\"name\":\"oldPlan\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"enum SubscriptionManager.Plan\",\"name\":\"newPlan\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"expiry\",\"type\":\"uint256\"}],\"name\":\"PlanDowngraded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"enum SubscriptionManager.Plan\",\"name\":\"oldPlan\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"enum SubscriptionManager.Plan\",\"name\":\"newPlan\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"expiry\",\"type\":\"uint256\"}],\"name\":\"PlanUpgraded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"basicPrice\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"proPrice\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"enterprisePrice\",\"type\":\"uint256\"}],\"name\":\"PriceUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"enum SubscriptionManager.Plan\",\"name\":\"plan\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"expiry\",\"type\":\"uint256\"}],\"name\":\"Subscribed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"Unsubscribed\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"activeSubscriptions\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"expiry\",\"type\":\"uint256\"},{\"internalType\":\"enum SubscriptionManager.Plan\",\"name\":\"planId\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"basicPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"enterprisePrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum SubscriptionManager.Plan\",\"name\":\"_plan\",\"type\":\"uint8\"}],\"name\":\"getPlanPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"issUserSubscribed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"proPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_basicPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_proPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_enterprisePrice\",\"type\":\"uint256\"}],\"name\":\"setPrices\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_duration\",\"type\":\"uint256\"}],\"name\":\"setSubscriptionDuration\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum SubscriptionManager.Plan\",\"name\":\"_plan\",\"type\":\"uint8\"}],\"name\":\"subscribe\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"subscriptionDuration\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unsubscribe\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum SubscriptionManager.Plan\",\"name\":\"_newPlan\",\"type\":\"uint8\"}],\"name\":\"upgradePlan\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdrawFunds\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"errors\":{\"OwnableInvalidOwner(address)\":[{\"details\":\"The owner is not a valid owner account. (eg. `address(0)`)\"}],\"OwnableUnauthorizedAccount(address)\":[{\"details\":\"The caller account is not authorized to perform an operation.\"}]},\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/SubscriptionManager.sol\":\"SubscriptionManager\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Context} from \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * The initial owner is set to the address provided by the deployer. This can\\n * later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    /**\\n     * @dev The caller account is not authorized to perform an operation.\\n     */\\n    error OwnableUnauthorizedAccount(address account);\\n\\n    /**\\n     * @dev The owner is not a valid owner account. (eg. `address(0)`)\\n     */\\n    error OwnableInvalidOwner(address owner);\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.\\n     */\\n    constructor(address initialOwner) {\\n        if (initialOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(initialOwner);\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        if (owner() != _msgSender()) {\\n            revert OwnableUnauthorizedAccount(_msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        if (newOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xff6d0bb2e285473e5311d9d3caacb525ae3538a80758c10649a4d61029b017bb\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\",\"keccak256\":\"0x493033a8d1b176a037b2cc6a04dad01a5c157722049bbecf632ca876224dd4b2\",\"license\":\"MIT\"},\"contracts/SubscriptionManager.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\ncontract SubscriptionManager is Ownable {\\n    enum Plan {\\n        Basic,\\n        Pro,\\n        Enterprise\\n    }\\n\\n    uint256 public basicPrice;\\n    uint256 public proPrice;\\n    uint256 public enterprisePrice;\\n    uint256 public subscriptionDuration;\\n\\n    struct Subscription {\\n        uint256 expiry; // Timestamp of subscription expiry\\n        Plan planId; // Subscription plan ID\\n    }\\n\\n    mapping(address => Subscription) public activeSubscriptions; // Tracks active subscriptions for each user\\n    event FundsWithdrawn(address indexed owner, uint256 amount);\\n    event Subscribed(address indexed user, Plan plan, uint256 expiry);\\n    event PlanUpgraded(\\n        address indexed user,\\n        Plan oldPlan,\\n        Plan newPlan,\\n        uint256 expiry\\n    );\\n    event PlanDowngraded(\\n        address indexed user,\\n        Plan oldPlan,\\n        Plan newPlan,\\n        uint256 expiry\\n    );\\n    event Unsubscribed(address indexed user);\\n    event PriceUpdated(\\n        uint256 basicPrice,\\n        uint256 proPrice,\\n        uint256 enterprisePrice\\n    );\\n\\n    constructor(\\n        uint256 _basicPrice,\\n        uint256 _proPrice,\\n        uint256 _enterprisePrice,\\n        uint256 _subscriptionDuration\\n    ) Ownable(msg.sender) {\\n        basicPrice = _basicPrice;\\n        proPrice = _proPrice;\\n        enterprisePrice = _enterprisePrice;\\n        subscriptionDuration = _subscriptionDuration;\\n    }\\n\\n    modifier isSubscribed(address user) {\\n        require(\\n            activeSubscriptions[user].expiry > block.timestamp,\\n            \\\"Err:sub-expired/inactive\\\"\\n        );\\n        _;\\n    }\\n\\n    function subscribe(Plan _plan) external payable {\\n        uint256 price = getPlanPrice(_plan);\\n        require(msg.value == price, \\\"Err:Sub-fee\\\");\\n\\n        uint256 newExpiry = block.timestamp + subscriptionDuration;\\n\\n        if (activeSubscriptions[msg.sender].expiry < block.timestamp) {\\n            activeSubscriptions[msg.sender].planId = _plan;\\n        } else {\\n            require(\\n                newExpiry > activeSubscriptions[msg.sender].expiry,\\n                \\\"Err:Expiry overflow\\\"\\n            );\\n        }\\n\\n        activeSubscriptions[msg.sender].expiry = newExpiry;\\n        emit Subscribed(msg.sender, _plan, newExpiry);\\n    }\\n\\n    function upgradePlan(\\n        Plan _newPlan\\n    ) external payable isSubscribed(msg.sender) {\\n        Plan currentPlan = activeSubscriptions[msg.sender].planId;\\n        require(_newPlan > currentPlan, \\\"Err: upgrade-onlyHigh\\\");\\n\\n        uint256 additionalCost = getPlanPrice(_newPlan) -\\n            getPlanPrice(currentPlan);\\n        require(msg.value == additionalCost, \\\"Err:Upgrade-incorrect value\\\");\\n\\n        activeSubscriptions[msg.sender].planId = _newPlan;\\n        emit PlanUpgraded(\\n            msg.sender,\\n            currentPlan,\\n            _newPlan,\\n            activeSubscriptions[msg.sender].expiry\\n        );\\n    }\\n\\n    function unsubscribe() external isSubscribed(msg.sender) {\\n        delete activeSubscriptions[msg.sender].planId;\\n        delete activeSubscriptions[msg.sender].expiry;\\n        emit Unsubscribed(msg.sender);\\n    }\\n\\n    function getPlanPrice(Plan _plan) public view returns (uint256) {\\n        if (_plan == Plan.Basic) return basicPrice;\\n        if (_plan == Plan.Pro) return proPrice;\\n        if (_plan == Plan.Enterprise) return enterprisePrice;\\n        revert(\\\"Invalid plan\\\");\\n    }\\n\\n    function setPrices(\\n        uint256 _basicPrice,\\n        uint256 _proPrice,\\n        uint256 _enterprisePrice\\n    ) external onlyOwner {\\n        basicPrice = _basicPrice;\\n        proPrice = _proPrice;\\n        enterprisePrice = _enterprisePrice;\\n        emit PriceUpdated(_basicPrice, _proPrice, _enterprisePrice);\\n    }\\n\\n    function setSubscriptionDuration(uint256 _duration) external onlyOwner {\\n        subscriptionDuration = _duration;\\n    }\\n\\n    function issUserSubscribed(address user) external view returns (bool) {\\n        return activeSubscriptions[user].expiry > block.timestamp;\\n    }\\n\\n    function withdrawFunds(uint256 amount) external onlyOwner {\\n        require(\\n            address(this).balance >= amount,\\n            \\\"Insufficient contract balance\\\"\\n        );\\n        payable(owner()).transfer(amount);\\n        emit FundsWithdrawn(owner(), amount);\\n    }\\n}\\n\",\"keccak256\":\"0x81374cf6aeae754bcfa2b24d2c23bd30d63a94772e275a7ab21c3ca49b450230\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50604051610c31380380610c3183398101604081905261002f916100c6565b338061005557604051631e4fbdf760e01b81526000600482015260240160405180910390fd5b61005e81610076565b506001939093556002919091556003556004556100fc565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b600080600080608085870312156100dc57600080fd5b505082516020840151604085015160609095015191969095509092509050565b610b268061010b6000396000f3fe6080604052600436106100f35760003560e01c80638da5cb5b1161008a578063db9191dd11610059578063db9191dd146102a9578063f2fde38b146102bf578063fcae4484146102df578063fdd5d01d146102f457600080fd5b80638da5cb5b146101fc578063a88fe42d14610224578063ca1140f914610244578063cac3c4d21461028957600080fd5b806362aaa325116100c657806362aaa3251461019e57806364760b6f146101b1578063715018a6146101d15780637a94a633146101e657600080fd5b80630739ad35146100f8578063155dd5ee1461014557806349c7e6391461016757806353b0e17d1461017a575b600080fd5b34801561010457600080fd5b50610130610113366004610988565b6001600160a01b0316600090815260056020526040902054421090565b60405190151581526020015b60405180910390f35b34801561015157600080fd5b506101656101603660046109b8565b61030a565b005b6101656101753660046109d1565b6103f2565b34801561018657600080fd5b5061019060025481565b60405190815260200161013c565b6101656101ac3660046109d1565b610546565b3480156101bd57600080fd5b506101906101cc3660046109d1565b610714565b3480156101dd57600080fd5b506101656107af565b3480156101f257600080fd5b5061019060045481565b34801561020857600080fd5b506000546040516001600160a01b03909116815260200161013c565b34801561023057600080fd5b5061016561023f3660046109f2565b6107c3565b34801561025057600080fd5b5061027b61025f366004610988565b6005602052600090815260409020805460019091015460ff1682565b60405161013c929190610a56565b34801561029557600080fd5b506101656102a43660046109b8565b610820565b3480156102b557600080fd5b5061019060015481565b3480156102cb57600080fd5b506101656102da366004610988565b61082d565b3480156102eb57600080fd5b5061016561086b565b34801561030057600080fd5b5061019060035481565b61031261090b565b804710156103675760405162461bcd60e51b815260206004820152601d60248201527f496e73756666696369656e7420636f6e74726163742062616c616e636500000060448201526064015b60405180910390fd5b600080546040516001600160a01b039091169183156108fc02918491818181858888f193505050501580156103a0573d6000803e3d6000fd5b506000546001600160a01b03166001600160a01b03167feaff4b37086828766ad3268786972c0cd24259d4c87a80f9d3963a3c3d999b0d826040516103e791815260200190565b60405180910390a250565b60006103fd82610714565b905080341461043c5760405162461bcd60e51b815260206004820152600b60248201526a4572723a5375622d66656560a81b604482015260640161035e565b60006004544261044c9190610a80565b336000908152600560205260409020549091504211156104a15733600090815260056020526040902060019081018054859260ff199091169083600281111561049757610497610a1e565b02179055506104f5565b3360009081526005602052604090205481116104f55760405162461bcd60e51b81526020600482015260136024820152724572723a457870697279206f766572666c6f7760681b604482015260640161035e565b3360008181526005602052604090819020839055517f044f95a2d17727b5b87e4f23d70278b59a2b0b285289cc9021cac8cdba4797b7906105399086908590610a99565b60405180910390a2505050565b33600081815260056020526040902054421061059f5760405162461bcd60e51b81526020600482015260186024820152774572723a7375622d657870697265642f696e61637469766560401b604482015260640161035e565b3360009081526005602052604090206001015460ff168060028111156105c7576105c7610a1e565b8360028111156105d9576105d9610a1e565b1161061e5760405162461bcd60e51b815260206004820152601560248201527408ae4e47440eae0cee4c2c8ca5adedcd8f290d2ced605b1b604482015260640161035e565b600061062982610714565b61063285610714565b61063c9190610ab4565b905080341461068d5760405162461bcd60e51b815260206004820152601b60248201527f4572723a557067726164652d696e636f72726563742076616c75650000000000604482015260640161035e565b33600090815260056020526040902060019081018054869260ff19909116908360028111156106be576106be610a1e565b021790555033600081815260056020526040908190205490517fd2c1d3b2cacc52d0b8d1de6b5eb789780c85c7c626bde0fbb2d30ec696b153f5916107069186918991610ac7565b60405180910390a250505050565b60008082600281111561072957610729610a1e565b0361073657505060015490565b600182600281111561074a5761074a610a1e565b0361075757505060025490565b600282600281111561076b5761076b610a1e565b0361077857505060035490565b60405162461bcd60e51b815260206004820152600c60248201526b24b73b30b634b210383630b760a11b604482015260640161035e565b6107b761090b565b6107c16000610938565b565b6107cb61090b565b60018390556002829055600381905560408051848152602081018490529081018290527f15819dd2fd9f6418b142e798d08a18d0bf06ea368f4480b7b0d3f75bd966bc489060600160405180910390a1505050565b61082861090b565b600455565b61083561090b565b6001600160a01b03811661085f57604051631e4fbdf760e01b81526000600482015260240161035e565b61086881610938565b50565b3360008181526005602052604090205442106108c45760405162461bcd60e51b81526020600482015260186024820152774572723a7375622d657870697265642f696e61637469766560401b604482015260640161035e565b3360008181526005602052604080822060018101805460ff19169055829055517fae563681ccc696fae58fe830f401bc9c043a43ddb9f7c2830b32c3c70d9966e79190a250565b6000546001600160a01b031633146107c15760405163118cdaa760e01b815233600482015260240161035e565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b60006020828403121561099a57600080fd5b81356001600160a01b03811681146109b157600080fd5b9392505050565b6000602082840312156109ca57600080fd5b5035919050565b6000602082840312156109e357600080fd5b8135600381106109b157600080fd5b600080600060608486031215610a0757600080fd5b505081359360208301359350604090920135919050565b634e487b7160e01b600052602160045260246000fd5b60038110610a5257634e487b7160e01b600052602160045260246000fd5b9052565b828152604081016109b16020830184610a34565b634e487b7160e01b600052601160045260246000fd5b80820180821115610a9357610a93610a6a565b92915050565b60408101610aa78285610a34565b8260208301529392505050565b81810381811115610a9357610a93610a6a565b60608101610ad58286610a34565b610ae26020830185610a34565b82604083015294935050505056fea26469706673582212206234549ba7fdd56d774bcf293ef73f8f6fc1c11434d00a4f108c00e993f78b8e64736f6c63430008140033",
  "deployedBytecode": "0x6080604052600436106100f35760003560e01c80638da5cb5b1161008a578063db9191dd11610059578063db9191dd146102a9578063f2fde38b146102bf578063fcae4484146102df578063fdd5d01d146102f457600080fd5b80638da5cb5b146101fc578063a88fe42d14610224578063ca1140f914610244578063cac3c4d21461028957600080fd5b806362aaa325116100c657806362aaa3251461019e57806364760b6f146101b1578063715018a6146101d15780637a94a633146101e657600080fd5b80630739ad35146100f8578063155dd5ee1461014557806349c7e6391461016757806353b0e17d1461017a575b600080fd5b34801561010457600080fd5b50610130610113366004610988565b6001600160a01b0316600090815260056020526040902054421090565b60405190151581526020015b60405180910390f35b34801561015157600080fd5b506101656101603660046109b8565b61030a565b005b6101656101753660046109d1565b6103f2565b34801561018657600080fd5b5061019060025481565b60405190815260200161013c565b6101656101ac3660046109d1565b610546565b3480156101bd57600080fd5b506101906101cc3660046109d1565b610714565b3480156101dd57600080fd5b506101656107af565b3480156101f257600080fd5b5061019060045481565b34801561020857600080fd5b506000546040516001600160a01b03909116815260200161013c565b34801561023057600080fd5b5061016561023f3660046109f2565b6107c3565b34801561025057600080fd5b5061027b61025f366004610988565b6005602052600090815260409020805460019091015460ff1682565b60405161013c929190610a56565b34801561029557600080fd5b506101656102a43660046109b8565b610820565b3480156102b557600080fd5b5061019060015481565b3480156102cb57600080fd5b506101656102da366004610988565b61082d565b3480156102eb57600080fd5b5061016561086b565b34801561030057600080fd5b5061019060035481565b61031261090b565b804710156103675760405162461bcd60e51b815260206004820152601d60248201527f496e73756666696369656e7420636f6e74726163742062616c616e636500000060448201526064015b60405180910390fd5b600080546040516001600160a01b039091169183156108fc02918491818181858888f193505050501580156103a0573d6000803e3d6000fd5b506000546001600160a01b03166001600160a01b03167feaff4b37086828766ad3268786972c0cd24259d4c87a80f9d3963a3c3d999b0d826040516103e791815260200190565b60405180910390a250565b60006103fd82610714565b905080341461043c5760405162461bcd60e51b815260206004820152600b60248201526a4572723a5375622d66656560a81b604482015260640161035e565b60006004544261044c9190610a80565b336000908152600560205260409020549091504211156104a15733600090815260056020526040902060019081018054859260ff199091169083600281111561049757610497610a1e565b02179055506104f5565b3360009081526005602052604090205481116104f55760405162461bcd60e51b81526020600482015260136024820152724572723a457870697279206f766572666c6f7760681b604482015260640161035e565b3360008181526005602052604090819020839055517f044f95a2d17727b5b87e4f23d70278b59a2b0b285289cc9021cac8cdba4797b7906105399086908590610a99565b60405180910390a2505050565b33600081815260056020526040902054421061059f5760405162461bcd60e51b81526020600482015260186024820152774572723a7375622d657870697265642f696e61637469766560401b604482015260640161035e565b3360009081526005602052604090206001015460ff168060028111156105c7576105c7610a1e565b8360028111156105d9576105d9610a1e565b1161061e5760405162461bcd60e51b815260206004820152601560248201527408ae4e47440eae0cee4c2c8ca5adedcd8f290d2ced605b1b604482015260640161035e565b600061062982610714565b61063285610714565b61063c9190610ab4565b905080341461068d5760405162461bcd60e51b815260206004820152601b60248201527f4572723a557067726164652d696e636f72726563742076616c75650000000000604482015260640161035e565b33600090815260056020526040902060019081018054869260ff19909116908360028111156106be576106be610a1e565b021790555033600081815260056020526040908190205490517fd2c1d3b2cacc52d0b8d1de6b5eb789780c85c7c626bde0fbb2d30ec696b153f5916107069186918991610ac7565b60405180910390a250505050565b60008082600281111561072957610729610a1e565b0361073657505060015490565b600182600281111561074a5761074a610a1e565b0361075757505060025490565b600282600281111561076b5761076b610a1e565b0361077857505060035490565b60405162461bcd60e51b815260206004820152600c60248201526b24b73b30b634b210383630b760a11b604482015260640161035e565b6107b761090b565b6107c16000610938565b565b6107cb61090b565b60018390556002829055600381905560408051848152602081018490529081018290527f15819dd2fd9f6418b142e798d08a18d0bf06ea368f4480b7b0d3f75bd966bc489060600160405180910390a1505050565b61082861090b565b600455565b61083561090b565b6001600160a01b03811661085f57604051631e4fbdf760e01b81526000600482015260240161035e565b61086881610938565b50565b3360008181526005602052604090205442106108c45760405162461bcd60e51b81526020600482015260186024820152774572723a7375622d657870697265642f696e61637469766560401b604482015260640161035e565b3360008181526005602052604080822060018101805460ff19169055829055517fae563681ccc696fae58fe830f401bc9c043a43ddb9f7c2830b32c3c70d9966e79190a250565b6000546001600160a01b031633146107c15760405163118cdaa760e01b815233600482015260240161035e565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b60006020828403121561099a57600080fd5b81356001600160a01b03811681146109b157600080fd5b9392505050565b6000602082840312156109ca57600080fd5b5035919050565b6000602082840312156109e357600080fd5b8135600381106109b157600080fd5b600080600060608486031215610a0757600080fd5b505081359360208301359350604090920135919050565b634e487b7160e01b600052602160045260246000fd5b60038110610a5257634e487b7160e01b600052602160045260246000fd5b9052565b828152604081016109b16020830184610a34565b634e487b7160e01b600052601160045260246000fd5b80820180821115610a9357610a93610a6a565b92915050565b60408101610aa78285610a34565b8260208301529392505050565b81810381811115610a9357610a93610a6a565b60608101610ad58286610a34565b610ae26020830185610a34565b82604083015294935050505056fea26469706673582212206234549ba7fdd56d774bcf293ef73f8f6fc1c11434d00a4f108c00e993f78b8e64736f6c63430008140033",
  "devdoc": {
    "errors": {
      "OwnableInvalidOwner(address)": [
        {
          "details": "The owner is not a valid owner account. (eg. `address(0)`)"
        }
      ],
      "OwnableUnauthorizedAccount(address)": [
        {
          "details": "The caller account is not authorized to perform an operation."
        }
      ]
    },
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 8,
        "contract": "contracts/SubscriptionManager.sol:SubscriptionManager",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 7309,
        "contract": "contracts/SubscriptionManager.sol:SubscriptionManager",
        "label": "basicPrice",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      },
      {
        "astId": 7311,
        "contract": "contracts/SubscriptionManager.sol:SubscriptionManager",
        "label": "proPrice",
        "offset": 0,
        "slot": "2",
        "type": "t_uint256"
      },
      {
        "astId": 7313,
        "contract": "contracts/SubscriptionManager.sol:SubscriptionManager",
        "label": "enterprisePrice",
        "offset": 0,
        "slot": "3",
        "type": "t_uint256"
      },
      {
        "astId": 7315,
        "contract": "contracts/SubscriptionManager.sol:SubscriptionManager",
        "label": "subscriptionDuration",
        "offset": 0,
        "slot": "4",
        "type": "t_uint256"
      },
      {
        "astId": 7326,
        "contract": "contracts/SubscriptionManager.sol:SubscriptionManager",
        "label": "activeSubscriptions",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_address,t_struct(Subscription)7321_storage)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_enum(Plan)7307": {
        "encoding": "inplace",
        "label": "enum SubscriptionManager.Plan",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_struct(Subscription)7321_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct SubscriptionManager.Subscription)",
        "numberOfBytes": "32",
        "value": "t_struct(Subscription)7321_storage"
      },
      "t_struct(Subscription)7321_storage": {
        "encoding": "inplace",
        "label": "struct SubscriptionManager.Subscription",
        "members": [
          {
            "astId": 7317,
            "contract": "contracts/SubscriptionManager.sol:SubscriptionManager",
            "label": "expiry",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 7320,
            "contract": "contracts/SubscriptionManager.sol:SubscriptionManager",
            "label": "planId",
            "offset": 0,
            "slot": "1",
            "type": "t_enum(Plan)7307"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}